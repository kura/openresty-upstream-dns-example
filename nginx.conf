# set 2 worker processes to show the timer spawning on each one
worker_processes 2;

events {
    worker_connections 1024;
}

http {

    # Do this for each worker so each worker has it's own copy of the DNS
    # records.
    init_worker_by_lua_block {
    
        local function update_dns()
            -- Set up the resolver
            local resolver = require "resty.dns.resolver"
            local r, err = resolver:new{
                nameservers = {"1.1.1.1", {"1.0.0.1", 53} },
                retrans = 5,  -- 5 retransmissions on receive timeout
                timeout = 1000,  -- 1 sec
            }
            if not r then
                ngx.log(ngx.ERR, "failed to instantiate resolver: ", err)
                return
            end

            -- Pull DNS records
            -- Use a hardcoded domain to make this example easier
            local answers, err, tries = r:query("kura.gg", nil, {})
            if not answers then
                ngx.log(ngx.ERR, "failed to query resolved: ", err)
                return
            end
            if answers.errcode then
                ngx.log(ngx.ERR, "server returned error code: ", answers.errcode,
                        ": ", answers.errstr)
                -- Have a return here so that the old servers remain even if
                -- this lookup fails.
                return
            end

            -- Dump records in a global variable
            -- Note I am only pulling out addresses not CNAMEs
            _backend_servers = {}
            for i, ans in ipairs(answers) do
                table.insert(_backend_servers, ans.address)
            end
        end

        -- Run an at timer to force update_dns to trigger now
        ngx.timer.at(0, update_dns)
        -- Set a timer to run every 10 seconds
        ngx.timer.every(10, update_dns)
    }

    upstream backend {
        server 127.0.0.1;

        balancer_by_lua_block {
            local balancer = require("ngx.balancer")
            -- Pick a random backend
            local server = _backend_servers[math.random(#_backend_servers)]

            -- This block will only trigger if ngx.ctx.retry is not true.
            -- We set this to true during the initial request so future
            -- requests within this context will not go down this path.
            if not ngx.ctx.retry then
                ngx.ctx.retry = true
                -- set up more tries using the length of the server list minus 1.
                ok, err = balancer.set_more_tries(#_backend_servers - 1)
                if not ok then
                    ngx.log(ngx.ERR, "set_more_tries failed: ", err)
                end
            end

            -- Hardcoded port again to make example easier
            ok, err = balancer.set_current_peer(server, 443)
            if not ok then
                ngx.log(ngx.ERR, "set_current_peer failed: ", err)
                return ngx.exit(500)
            end
        }
    }

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://backend;
        }
    }

}
